import { InjectionToken } from '@angular/core';
export class ImageViewerConfig {
}
export function createButtonConfig(icon, tooltip, sortId = 0, show = true) {
    return { icon: icon, tooltip: tooltip, sortId: sortId, show: show };
}
export const IMAGEVIEWER_CONFIG = new InjectionToken('imageviewer.config');
export let IMAGEVIEWER_CONFIG_DEFAULT = {
    width: 800,
    height: 600,
    bgStyle: '#ECEFF1',
    scaleStep: 0.1,
    rotateStepper: false,
    loadingMessage: 'Loading...',
    buttonStyle: {
        iconFontFamily: 'Material Icons',
        alpha: 0.5,
        hoverAlpha: 0.7,
        bgStyle: '#000000',
        iconStyle: '#ffffff',
        borderStyle: '#000000',
        borderWidth: 0 // buttons' border width (0 == disabled)
    },
    tooltips: {
        enabled: true,
        bgStyle: '#000000',
        bgAlpha: 0.5,
        textStyle: '#ffffff',
        textAlpha: 0.9,
        padding: 15,
        radius: 20 // tooltip border radius
    },
    nextPageButton: createButtonConfig(String.fromCharCode(0xE409), 'Next page', 0),
    beforePageButton: createButtonConfig(String.fromCharCode(0xE408), 'Previous page', 1),
    zoomOutButton: createButtonConfig(String.fromCharCode(0xE900), 'Zoom out', 0),
    zoomInButton: createButtonConfig(String.fromCharCode(0xE8FF), 'Zoom in', 1),
    rotateLeftButton: createButtonConfig(String.fromCharCode(0xE419), 'Rotate left', 2),
    rotateRightButton: createButtonConfig(String.fromCharCode(0xE41A), 'Rotate right', 3),
    resetButton: createButtonConfig(String.fromCharCode(0xE863), 'Reset', 4)
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2V2aWV3ZXIuY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWltYWdldmlld2VyL3NyYy9saWIvaW1hZ2V2aWV3ZXIuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0QsTUFBTSxPQUFPLGlCQUFpQjtDQXdCN0I7QUFtQkQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLElBQWEsRUFBRSxPQUFnQixFQUFFLFNBQWlCLENBQUMsRUFBRSxPQUFnQixJQUFJO0lBQzFHLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDdEUsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBRTlGLE1BQU0sQ0FBQyxJQUFJLDBCQUEwQixHQUFzQjtJQUN6RCxLQUFLLEVBQUUsR0FBRztJQUNWLE1BQU0sRUFBRSxHQUFHO0lBQ1gsT0FBTyxFQUFFLFNBQVM7SUFDbEIsU0FBUyxFQUFFLEdBQUc7SUFDZCxhQUFhLEVBQUUsS0FBSztJQUNwQixjQUFjLEVBQUUsWUFBWTtJQUM1QixXQUFXLEVBQUU7UUFDWCxjQUFjLEVBQUUsZ0JBQWdCO1FBQ2hDLEtBQUssRUFBRSxHQUFHO1FBQ1YsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUUsU0FBUztRQUNsQixTQUFTLEVBQUUsU0FBUztRQUNwQixXQUFXLEVBQUUsU0FBUztRQUN0QixXQUFXLEVBQUUsQ0FBQyxDQUFDLHdDQUF3QztLQUN4RDtJQUNELFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxJQUFJO1FBQ2IsT0FBTyxFQUFFLFNBQVM7UUFDbEIsT0FBTyxFQUFFLEdBQUc7UUFDWixTQUFTLEVBQUUsU0FBUztRQUNwQixTQUFTLEVBQUUsR0FBRztRQUNkLE9BQU8sRUFBRSxFQUFFO1FBQ1gsTUFBTSxFQUFFLEVBQUUsQ0FBQyx3QkFBd0I7S0FDcEM7SUFDRCxjQUFjLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLGdCQUFnQixFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUNyRixhQUFhLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQzdFLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDM0UsZ0JBQWdCLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQ25GLGlCQUFpQixFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUNyRixXQUFXLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0NBQ3pFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgSW1hZ2VWaWV3ZXJDb25maWcge1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBiZ1N0eWxlPzogc3RyaW5nO1xuICBzY2FsZVN0ZXA/OiBudW1iZXI7XG4gIHJvdGF0ZVN0ZXBwZXI/OiBib29sZWFuO1xuICBidXR0b25TdHlsZT86IEJ1dHRvblN0eWxlO1xuICBsb2FkaW5nTWVzc2FnZT86IHN0cmluZztcbiAgdG9vbHRpcHM/OiB7XG4gICAgZW5hYmxlZD86IGJvb2xlYW4sXG4gICAgYmdTdHlsZT86IHN0cmluZyxcbiAgICBiZ0FscGhhPzogbnVtYmVyLFxuICAgIHRleHRTdHlsZT86IHN0cmluZyxcbiAgICB0ZXh0QWxwaGE/OiBudW1iZXIsXG4gICAgcGFkZGluZz86IG51bWJlcixcbiAgICByYWRpdXM/OiBudW1iZXJcbiAgfTtcbiAgbmV4dFBhZ2VCdXR0b24/OiBCdXR0b25Db25maWc7XG4gIGJlZm9yZVBhZ2VCdXR0b24/OiBCdXR0b25Db25maWc7XG4gIHpvb21PdXRCdXR0b24/OiBCdXR0b25Db25maWc7XG4gIHpvb21JbkJ1dHRvbj86IEJ1dHRvbkNvbmZpZztcbiAgcm90YXRlTGVmdEJ1dHRvbj86IEJ1dHRvbkNvbmZpZztcbiAgcm90YXRlUmlnaHRCdXR0b24/OiBCdXR0b25Db25maWc7XG4gIHJlc2V0QnV0dG9uPzogQnV0dG9uQ29uZmlnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1dHRvblN0eWxlIHtcbiAgaWNvbkZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gIGFscGhhPzogbnVtYmVyO1xuICBob3ZlckFscGhhPzogbnVtYmVyO1xuICBiZ1N0eWxlPzogc3RyaW5nO1xuICBpY29uU3R5bGU/OiBzdHJpbmc7XG4gIGJvcmRlclN0eWxlPzogc3RyaW5nO1xuICBib3JkZXJXaWR0aD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdXR0b25Db25maWcge1xuICBpY29uPzogc3RyaW5nO1xuICB0b29sdGlwPzogc3RyaW5nO1xuICBzb3J0SWQ/OiBudW1iZXI7XG4gIHNob3c/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQnV0dG9uQ29uZmlnKGljb24/OiBzdHJpbmcsIHRvb2x0aXA/OiBzdHJpbmcsIHNvcnRJZDogbnVtYmVyID0gMCwgc2hvdzogYm9vbGVhbiA9IHRydWUpIHtcbiAgcmV0dXJuIHsgaWNvbjogaWNvbiwgdG9vbHRpcDogdG9vbHRpcCwgc29ydElkOiBzb3J0SWQsIHNob3c6IHNob3cgfTtcbn1cblxuZXhwb3J0IGNvbnN0IElNQUdFVklFV0VSX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxJbWFnZVZpZXdlckNvbmZpZz4oJ2ltYWdldmlld2VyLmNvbmZpZycpO1xuXG5leHBvcnQgbGV0IElNQUdFVklFV0VSX0NPTkZJR19ERUZBVUxUOiBJbWFnZVZpZXdlckNvbmZpZyA9IHtcbiAgd2lkdGg6IDgwMCwgLy8gY29tcG9uZW50IGRlZmF1bHQgd2lkdGhcbiAgaGVpZ2h0OiA2MDAsIC8vIGNvbXBvbmVudCBkZWZhdWx0IGhlaWdodFxuICBiZ1N0eWxlOiAnI0VDRUZGMScsIC8vIGNvbXBvbmVudCBiYWNrZ3JvdW5kIHN0eWxlXG4gIHNjYWxlU3RlcDogMC4xLCAvLyB6b29tIHNjYWxlIHN0ZXAgKHVzaW5nIHRoZSB6b29tIGluL291dCBidXR0b25zKVxuICByb3RhdGVTdGVwcGVyOiBmYWxzZSxcbiAgbG9hZGluZ01lc3NhZ2U6ICdMb2FkaW5nLi4uJyxcbiAgYnV0dG9uU3R5bGU6IHtcbiAgICBpY29uRm9udEZhbWlseTogJ01hdGVyaWFsIEljb25zJywgLy8gZm9udCB1c2VkIHRvIHJlbmRlciB0aGUgYnV0dG9uIGljb25zXG4gICAgYWxwaGE6IDAuNSwgLy8gYnV0dG9ucycgdHJhbnNwYXJlbmNlIHZhbHVlXG4gICAgaG92ZXJBbHBoYTogMC43LCAvLyBidXR0b25zJyB0cmFuc3BhcmVuY2UgdmFsdWUgd2hlbiBtb3VzZSBpcyBvdmVyXG4gICAgYmdTdHlsZTogJyMwMDAwMDAnLCAvLyAgYnV0dG9ucycgYmFja2dyb3VuZCBzdHlsZVxuICAgIGljb25TdHlsZTogJyNmZmZmZmYnLCAvLyBidXR0b25zJyBpY29uIGNvbG9yc1xuICAgIGJvcmRlclN0eWxlOiAnIzAwMDAwMCcsIC8vIGJ1dHRvbnMnIGJvcmRlciBzdHlsZVxuICAgIGJvcmRlcldpZHRoOiAwIC8vIGJ1dHRvbnMnIGJvcmRlciB3aWR0aCAoMCA9PSBkaXNhYmxlZClcbiAgfSxcbiAgdG9vbHRpcHM6IHtcbiAgICBlbmFibGVkOiB0cnVlLCAvLyBlbmFibGUgb3IgZGlzYWJsZSB0b29sdGlwcyBmb3IgYnV0dG9uc1xuICAgIGJnU3R5bGU6ICcjMDAwMDAwJywgLy8gdG9vbHRpcCBiYWNrZ3JvdW5kIHN0eWxlXG4gICAgYmdBbHBoYTogMC41LCAvLyB0b29sdGlwIGJhY2tncm91bmQgdHJhbnNwYXJlbmNlXG4gICAgdGV4dFN0eWxlOiAnI2ZmZmZmZicsIC8vIHRvb2x0aXAncyB0ZXh0IHN0eWxlXG4gICAgdGV4dEFscGhhOiAwLjksIC8vIHRvb2x0aXAncyB0ZXh0IHRyYW5zcGFyZW5jZVxuICAgIHBhZGRpbmc6IDE1LCAvLyB0b29sdGlwIHBhZGRpbmdcbiAgICByYWRpdXM6IDIwIC8vIHRvb2x0aXAgYm9yZGVyIHJhZGl1c1xuICB9LFxuICBuZXh0UGFnZUJ1dHRvbjogY3JlYXRlQnV0dG9uQ29uZmlnKFN0cmluZy5mcm9tQ2hhckNvZGUoMHhFNDA5KSwgJ05leHQgcGFnZScsIDApLFxuICBiZWZvcmVQYWdlQnV0dG9uOiBjcmVhdGVCdXR0b25Db25maWcoU3RyaW5nLmZyb21DaGFyQ29kZSgweEU0MDgpLCAnUHJldmlvdXMgcGFnZScsIDEpLFxuICB6b29tT3V0QnV0dG9uOiBjcmVhdGVCdXR0b25Db25maWcoU3RyaW5nLmZyb21DaGFyQ29kZSgweEU5MDApLCAnWm9vbSBvdXQnLCAwKSxcbiAgem9vbUluQnV0dG9uOiBjcmVhdGVCdXR0b25Db25maWcoU3RyaW5nLmZyb21DaGFyQ29kZSgweEU4RkYpLCAnWm9vbSBpbicsIDEpLFxuICByb3RhdGVMZWZ0QnV0dG9uOiBjcmVhdGVCdXR0b25Db25maWcoU3RyaW5nLmZyb21DaGFyQ29kZSgweEU0MTkpLCAnUm90YXRlIGxlZnQnLCAyKSxcbiAgcm90YXRlUmlnaHRCdXR0b246IGNyZWF0ZUJ1dHRvbkNvbmZpZyhTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RTQxQSksICdSb3RhdGUgcmlnaHQnLCAzKSxcbiAgcmVzZXRCdXR0b246IGNyZWF0ZUJ1dHRvbkNvbmZpZyhTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RTg2MyksICdSZXNldCcsIDQpXG59O1xuIl19