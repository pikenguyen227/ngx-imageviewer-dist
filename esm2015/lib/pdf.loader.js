import { ResourceLoader } from './imageviewer.model';
import { getDocument } from '../../../../build/pdf.min.js';
export class PdfResourceLoader extends ResourceLoader {
    constructor(_imageCache) {
        super();
        this._imageCache = _imageCache;
        this.showItemsQuantity = true;
    }
    setUp() {
        const vm = this;
        if (vm.loading || !vm.src) {
            return;
        }
        const loadingTask = getDocument(vm.src);
        vm.loading = true;
        vm.currentItem = 1;
        loadingTask.promise.then((pdf) => {
            vm._pdf = pdf;
            vm.totalItem = pdf.numPages;
            vm.loaded = true;
            vm.loadResource();
        }, (reason) => {
            console.error(reason);
        });
    }
    loadResource() {
        const vm = this;
        if (!vm.loaded) {
            vm._pendingReload = true;
            return;
        }
        vm.loaded = false;
        const url = vm.src;
        const page = vm.currentItem;
        vm._pdf.getPage(page).then((pdfPage) => {
            vm._page = pdfPage;
            vm.loadImage(url, page, () => {
                vm.loaded = true;
                vm.loading = false;
                if (vm._pendingReload) {
                    vm._pendingReload = false;
                    vm.loadResource();
                }
                else {
                    vm.resourceChange.next();
                }
            });
        });
    }
    loadImage(src, page, onFinish) {
        const vm = this;
        const cacheimg = vm._imageCache.getImage(src, page);
        if (cacheimg) {
            vm._image = cacheimg;
            onFinish();
            return;
        }
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        const pageVp = vm._page.getViewport({ scale: 2 });
        canvas.width = pageVp.width;
        canvas.height = pageVp.height;
        const renderContext = {
            canvasContext: context,
            viewport: pageVp
        };
        const renderTask = vm._page.render(renderContext);
        renderTask.promise.then(() => {
            canvas.toBlob(blob => {
                const img = new Image();
                img.onload = onFinish;
                img.src = URL.createObjectURL(blob);
                vm._imageCache.saveImage(src, page, img);
                vm._image = img;
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLmxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1pbWFnZXZpZXdlci9zcmMvbGliL3BkZi5sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBNEIsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFM0QsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGNBQWM7SUFLbkQsWUFBb0IsV0FBOEI7UUFDaEQsS0FBSyxFQUFFLENBQUM7UUFEVSxnQkFBVyxHQUFYLFdBQVcsQ0FBbUI7UUFFaEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQ3RDLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDbEIsRUFBRSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDbkIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUMvQixFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUNkLEVBQUUsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztZQUM1QixFQUFFLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNqQixFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxFQUFFLENBQUMsTUFBYyxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FB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c291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzb3VyY2VMb2FkZXIsIERpbWVuc2lvbiwgdG9TcXVhcmVBbmdsZSB9IGZyb20gJy4vaW1hZ2V2aWV3ZXIubW9kZWwnO1xuaW1wb3J0IHsgSW1hZ2VDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2ltYWdlY2FjaGUuc2VydmljZSc7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2J1aWxkL3BkZi5taW4uanMnO1xuXG5leHBvcnQgY2xhc3MgUGRmUmVzb3VyY2VMb2FkZXIgZXh0ZW5kcyBSZXNvdXJjZUxvYWRlciB7XG4gIHByaXZhdGUgX3BkZjtcbiAgcHJpdmF0ZSBfcGFnZTtcbiAgcHJpdmF0ZSBfcGVuZGluZ1JlbG9hZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9pbWFnZUNhY2hlOiBJbWFnZUNhY2hlU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zaG93SXRlbXNRdWFudGl0eSA9IHRydWU7XG4gIH1cblxuICBzZXRVcCgpIHtcbiAgICBjb25zdCB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLmxvYWRpbmcgfHwgIXZtLnNyYykgeyByZXR1cm47IH1cbiAgICBjb25zdCBsb2FkaW5nVGFzayA9IGdldERvY3VtZW50KHZtLnNyYyk7XG4gICAgdm0ubG9hZGluZyA9IHRydWU7XG4gICAgdm0uY3VycmVudEl0ZW0gPSAxO1xuICAgIGxvYWRpbmdUYXNrLnByb21pc2UudGhlbigocGRmKSA9PiB7XG4gICAgICB2bS5fcGRmID0gcGRmO1xuICAgICAgdm0udG90YWxJdGVtID0gcGRmLm51bVBhZ2VzO1xuICAgICAgdm0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgIHZtLmxvYWRSZXNvdXJjZSgpO1xuICAgIH0sIChyZWFzb246IHN0cmluZykgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihyZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZFJlc291cmNlKCkge1xuICAgIGNvbnN0IHZtID0gdGhpcztcbiAgICBpZiAoIXZtLmxvYWRlZCkge1xuICAgICAgdm0uX3BlbmRpbmdSZWxvYWQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2bS5sb2FkZWQgPSBmYWxzZTtcbiAgICBjb25zdCB1cmwgPSB2bS5zcmM7XG4gICAgY29uc3QgcGFnZSA9IHZtLmN1cnJlbnRJdGVtO1xuXG4gICAgdm0uX3BkZi5nZXRQYWdlKHBhZ2UpLnRoZW4oKHBkZlBhZ2UpID0+IHtcbiAgICAgIHZtLl9wYWdlID0gcGRmUGFnZTtcbiAgICAgIHZtLmxvYWRJbWFnZSh1cmwsIHBhZ2UsICgpID0+IHtcbiAgICAgICAgdm0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgdm0ubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAodm0uX3BlbmRpbmdSZWxvYWQpIHtcbiAgICAgICAgICB2bS5fcGVuZGluZ1JlbG9hZCA9IGZhbHNlO1xuICAgICAgICAgIHZtLmxvYWRSZXNvdXJjZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZtLnJlc291cmNlQ2hhbmdlLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGxvYWRJbWFnZShzcmM6IHN0cmluZywgcGFnZTogbnVtYmVyLCBvbkZpbmlzaDogKCkgPT4gdm9pZCkge1xuICAgIGNvbnN0IHZtID0gdGhpcztcbiAgICBjb25zdCBjYWNoZWltZyA9IHZtLl9pbWFnZUNhY2hlLmdldEltYWdlKHNyYywgcGFnZSk7XG4gICAgaWYgKGNhY2hlaW1nKSB7XG4gICAgICB2bS5faW1hZ2UgPSBjYWNoZWltZztcbiAgICAgIG9uRmluaXNoKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCBwYWdlVnAgPSB2bS5fcGFnZS5nZXRWaWV3cG9ydCh7IHNjYWxlOiAyIH0pO1xuICAgIGNhbnZhcy53aWR0aCA9IHBhZ2VWcC53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gcGFnZVZwLmhlaWdodDtcblxuICAgIGNvbnN0IHJlbmRlckNvbnRleHQgPSB7XG4gICAgICBjYW52YXNDb250ZXh0OiBjb250ZXh0LFxuICAgICAgdmlld3BvcnQ6IHBhZ2VWcFxuICAgIH07XG4gICAgY29uc3QgcmVuZGVyVGFzayA9IHZtLl9wYWdlLnJlbmRlcihyZW5kZXJDb250ZXh0KTtcbiAgICByZW5kZXJUYXNrLnByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICBjYW52YXMudG9CbG9iKGJsb2IgPT4ge1xuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nLm9ubG9hZCA9IG9uRmluaXNoO1xuICAgICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgdm0uX2ltYWdlQ2FjaGUuc2F2ZUltYWdlKHNyYywgcGFnZSwgaW1nKTtcbiAgICAgICAgdm0uX2ltYWdlID0gaW1nO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==